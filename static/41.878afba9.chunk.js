webpackJsonp([41],{1557:function(t,e,n){var a=n(1),s=n(67),d=n(309).PageRenderer;d.__esModule&&(d=d.default);var r=s({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:n(1613)}},componentWillMount:function(){},render:function(){return a.createElement(d,Object.assign({},this.props,{content:this.state.content}))}});r.__catalog_loader__=!0,t.exports=r},1613:function(t,e){t.exports="```react\nnoSource: true\n---\n<React.Fragment>\n\t<V6Banner />\n</React.Fragment>\n```\n\n## Default Date Picker\n\n```react\nshowSource: true\nstate: { selectedDate: null }\n---\n<DatePickerDemo>\n\t<div>\n\t\t<span>The selected date is {dateFunctions.format(state.selectedDate, 'MM-dd-yyyy')}</span>\n\t\t<Button ref={refs[0]} onClick={() => setState({ isOpen: !state.isOpen })}>Select Date</Button>\n\t\t{state.isOpen && (\n\t\t\t<Popover reference={refs[0].current} placement=\"bottom\" styleOverrides={{ maxWidth: '1000px' }} onFocusAway={() => setState({ isOpen: false })}>\n\t\t\t\t<DatePicker\n\t\t\t\t\tselectedDate={state.selectedDate}\n\t\t\t\t\tsetSelectedDate={(date) => setState({ selectedDate: date })}\n\t\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\t\tvalidate={() => true}\n\t\t\t\t/>\n\t\t\t</Popover>\n\t\t)}\n\t</div>\n</DatePickerDemo>\n```\n\n## With Min and Max Dates\n\n```react\nshowSource: true\nstate: { selectedDate: null }\n---\n<DatePickerDemo>\n\t<div>\n\t\t<span>The selected date is {dateFunctions.format(state.selectedDate, 'MM-dd-yyyy')}</span>\n\t\t<Button ref={refs[1]} onClick={() => setState({ isOpen: !state.isOpen })}>Select Date</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Popover reference={refs[1].current} placement=\"bottom\" styleOverrides={{ maxWidth: '1000px' }} onFocusAway={() => setState({ isOpen: false })}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tselectedDate={state.selectedDate}\n\t\t\t\t\t\tminDate={new Date(today.getTime()).setMonth(today.getMonth() - 2)}\n\t\t\t\t\t\tmaxDate={new Date(today.getTime()).setMonth(today.getMonth() + 2)}\n\t\t\t\t\t\tsetSelectedDate={(date) => setState({ selectedDate: date })}\n\t\t\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\t\t\tvalidate={() => true}\n\t\t\t\t\t/>\n\t\t\t\t</Popover>\n\t\t\t)}\n\t</div>\n</DatePickerDemo>\n```\n\n## Default Date Range Picker\n\n```react\nshowSource: true\nstate: { selectedDateRange: null }\n---\n<DatePickerDemo>\n\t<div>\n\t\t<span>The selected date range is {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.start, 'MM-dd-yyyy') : null)} to {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.end, 'MM-dd-yyyy') : null)}</span>\n\t\t\t<Button ref={refs[2]} onClick={() => setState({ isOpen: !state.isOpen })}>Select Dates</Button>\n\t\t\t{state.isOpen && (\n\t\t\t\t<Popover reference={refs[2].current} placement=\"bottom\" styleOverrides={{ maxWidth: '1000px' }} onFocusAway={() => setState({ isOpen: false })}>\n\t\t\t\t\t<DatePicker\n\t\t\t\t\t\tselectedDateRange={state.selectedDateRange}\n\t\t\t\t\t\tsetSelectedDate={(dateRange) => setState({ selectedDateRange: dateRange })}\n\t\t\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\t\t\tvalidate={() => true}\n\t\t\t\t\t\tasDateRangePicker\n\t\t\t\t\t/>\n\t\t\t\t</Popover>\n\t\t\t)}\n\t</div>\n</DatePickerDemo>\n```\n\n## Date Period Picker\n\n```react\nshowSource: true\nstate: { selectedDateRange: null, selectedDatePeriodIndex: null }\n---\n<DatePickerDemo>\n\t<div>The selected date range is {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.start, 'MM-dd-yyyy') : null)} to {(state.selectedDateRange ? dateFunctions.format(state.selectedDateRange.end, 'MM-dd-yyyy') : null)}</div>\n\t<div>The selected date period index is <code>{state.selectedDatePeriodIndex === null ? \"null\" : state.selectedDatePeriodIndex}</code></div>\n\t<Button ref={refs[3]} onClick={() => setState({ isOpen: !state.isOpen })} style={{ margin: \"0.5rem 4rem\" }}>Select Dates</Button>\n\t{state.isOpen && (\n\t\t<Popover reference={refs[3].current} placement=\"bottom\" styleOverrides={{ padding: '0px', maxWidth: '1000px' }} onFocusAway={() => setState({ isOpen: false })}>\n\t\t\t<DatePeriodPicker\n\t\t\t\tselectedDateRange={state.selectedDateRange}\n\t\t\t\tsetSelectedDate={(dateRange, periodIndex) => {\n\t\t\t\t\tsetState({ selectedDateRange: dateRange, selectedDatePeriodIndex: periodIndex })\n\t\t\t\t}}\n\t\t\t\tdateFunctions={dateFunctions}\n\t\t\t\tvalidate={date => date >= new Date(1970, 0, 1)}\n\t\t\t\tparseDate={dateFunctions.parse}\n\t\t\t\tdatePeriods={[{\n\t\t\t\t\tdisplayName: 'Last 7 Days',\n\t\t\t\t\tdateRange: { start: dateFunctions.addDays(new Date(), -7), end: new Date() }\n\t\t\t\t},{\n\t\t\t\t\tdisplayName: 'Last 30 Days',\n\t\t\t\t\tdateRange: { start: dateFunctions.addDays(new Date(), -30), end: new Date() }\n\t\t\t\t},{\n\t\t\t\t\tdisplayName: 'Last 90 Days',\n\t\t\t\t\tdateRange: { start: dateFunctions.addDays(new Date(), -90), end: new Date() }\n\t\t\t\t}]}\n\t\t\t/>\n\t\t</Popover>\n\t)}\n</DatePickerDemo>\n```\n"}});
//# sourceMappingURL=41.878afba9.chunk.js.map